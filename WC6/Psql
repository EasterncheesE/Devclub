-- 1. Создать базу данных shop.
-- 2. Создать юзера shop и дать ему полный доступ к БД shop.
-- 3. Создать юзера viewer и дать ему доступ на чтение БД shop.
-- 4. Создать таблицу для хранения категорий (хранить название).
-- 5. Добавить несколько категорий.
-- 6. Создать таблицу для хранения товаров (название, категория, цена).
-- 7. Внести несколько товаров по цене 1.00
-- 8. Обновить цену первого товара — 3.50
-- 9. Увеличить цену всех товаров на 10%.
-- 10. Удалить товар № 2.
-- 11. Выбрать все товары с сортировкой по названию.
-- 12. Выбрать все товары с сортировкой по убыванию цены.
-- 13. Выбрать 3 самых дорогих товара.
-- 14. Выбрать 3 самых дешевых товара.
-- 15. Выбрать вторую тройку самых дорогих товаров (с 4 по 6).
-- 16. Выбрать наименование самого дорогого товара.
-- 17. Выбрать наименование самого дешевого товара.
-- 18. Выбрать количество всех товаров.
-- 19. Выбрать среднюю цену всех товаров.
-- 20. Создать представление (create view) с отображением 3 самых дорогих товаров.


-- 1-2
CREATE USER shop LOGIN CREATEDB PASSWORD 'shop';
CREATE DATABASE shop WITH OWNER=shop ENCODING='UTF8';

-- 4
CREATE TABLE IF NOT EXISTS "category"  (
    id SERIAL PRIMARY KEY NOT NULL,
    title VARCHAR(100) NOT NULL UNIQUE
);

-- 5
INSERT INTO "category" (title) VALUES ('smartphones'), ('tablets'), ('trackers');

-- 6
CREATE TABLE IF NOT EXISTS "item" (
    id SERIAL PRIMARY KEY NOT NULL,
    category_id INTEGER NOT NULL,
    title VARCHAR(100) NOT NULL,
    price NUMERIC(8, 2) NOT NULL DEFAULT 9.99
);

-- 7
INSERT INTO "item" (category_id, title, price) VALUES
(1, 'iPhone3g', 1), (1, 'iPhone4', 1), (1, 'iPhone5', 1), (1, 'OnePlus', 1),
(3, 'iWatch', 1), (3, 'iWatch2', 1),
(2, 'iPad', 1), (2, 'iPad2', 1);

-- 8
UPDATE item
    SET price = 3.5
    WHERE id = 1;

-- 9
UPDATE item
    SET price = price * 1.1;
    
-- 10
DELETE FROM item 
    WHERE id = 2;
    
-- 11-19
select * from item ORDER BY title ASC;
select * from item ORDER BY price DESC;
select * from item ORDER BY price DESC LIMIT 3;
select * from item ORDER BY price ASC LIMIT 3;
select * from item ORDER BY price DESC OFFSET 3 LIMIT 3;
select * from item ORDER BY price DESC LIMIT 1;
select * from item ORDER BY price ASC LIMIT 1;
select count(*) from item;
select AVG(price) from item;