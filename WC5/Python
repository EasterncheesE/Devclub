BCW5. 19.09.2020

Python. То, что будут показывать - не истина в последней инстанции, но он показывает как он это делает и как это делали на большинстве проектов, где Кайман работал.

Организация проекта на Python. 
Почитать про виртуальные окружения и как их настраивать.
Сделал себе в папке WC5 Tutorial ENV.

python3 -m venv tutorial-env - создать виртуальное окружение
source tutorial-env/bin/activate - открыть виртуальное окружение

Чтобы выйти из виртуального окружения, нужно вбить deactivate.
В проекте создаем папку .meta/packages

Почитать про install packages (pip).
Почитать про Iphyton.

Чтобы программировать на питоне:
1) Выбираем версию питона, на которой мы будем работать.
2) Создаем виртуальное окружение (потому что в нем не страшно что-то сломать).


Структуры данных в Python:
    1) Массив (Tuple).  array = (1,2,3,4,5)
        Оно охрененно быстрое и занимает очень мало памяти. Удобно для передачи значений между функциями или хранения константных вещей. 
        Обычный неизменяемый массив. Работает как сишный массив без отличий. НО ОН НЕ ПОДДЕРЖИВАЕТ ИЗМЕНЕНИЕ. Его в принципе нельзя изменить. 
    2) Список (List). array = [1,2,3,4,5]
        Аналог Vector в c++.  

    3) Множество (Set).  array = {1,1,1,1,1,1,1,2,2,2,2,3,3,3,3,4,5,5,6,6,7}
        SET располагает вещи в порядке хэшей, а не в алфавитном (но это, в 99% случаев одно и то же). Прожорливый по памяти, но быстрый.

    4) Словарь (Dictionary). array = {'username': 'caiman', 'host': '127.0.0.1', 'password': 'qwerty'}. Потом можно array['username']. 
        Аналог Map из C++. Пара ключ/значение.
        Можно получить список ключей, список предметов : array.keys(), array.items(), array.values(). Добавление ключа: array['port'] = 80. Изменение: array['host'] = 'localhost'.
        Удаление: del array['port']. или array.pop('username').

    
    Типы данных:
        1) String. Строки, все как обычно, но не кавычки, а апострофы. hello = 'Hello,world!'. Более того, питон работает в юникоде, так что русский язык поддерживается. В dir есть атрибуты string, все, что isblababla, это то, что заполняется при создании строки. 

    Синтаксис:
        def func(x,y) : 
            return x + y
            
            Если попробовать сложить строку с интом, то оно кинет исключение.
            
        вариант построже:
         def func(x: int, y: int) -> int:
            return x + y
            
            Если в таком варианте попробовать сложить строку с интом, то банально ничего не произойдет.

    Складывать строки с цифрами низзя, хоть язык и с динамический типизацией.



Заметки:
1) Синтаксис: 2 ** 5 = 32. ** - оператор возведения в степень. ** и <<  очень разные вещи.
2) В питоне длинная арифметика, так что он может обрабатывать ОЧЕНЬ большие числа.
3) type(object) - посмотреть тип объекта. dir(object) - показывает все свойства объекта. 
4) array.count.__doc__ - документация по функции.
5) объявление массива: , объявление List - .
6) вывод List: array[::-1] - выводит массив с конца в начало, array[2::5] - выводит со второго до пятого. Называется Slice/срез.
7) Вывод в консоль - print(). Как форматировать строку питоном:
    1. Old Style - сишный стиль с %s и т.д. 
        'Hello, %s!' % 'caiman'. % применительно к строкам - это оператор подмены, но для чисел он работает как оператор взятия остатка. '%s + %s = love!' % ('caiman', 'python').
        Или еще пример кода:
        params = {'username' : 'caiman', 'password': 'qwerty', 'age': 33};
        '$(username)s ==> $(password)s' % params
    
        На числах:
        '%d + %d = %d' % (2, 2, 2 + 2)
    
    2. format(атрибут string):
        https://docs.python.org/3.4/library/string.html#format-string-syntax
        Один вариант: '{} + {} = {}'.format(2,2,2+2).
        Еще можно: ' {0} + {0} = {1}'.format(2,4);
        С туплом: '{username} ==> {password}'.format(username='caiman', password='qwerty')
        Штука, ломающая психику: '{username} ==> {password}'.format(**params)
    
    3. f'
    У есть есть male = 'John', female = 'Jane'.
    Делаем f'{male} + {female} = Love!'
8) Сказать кайману показать тайпинг в IDE 20.09.2020.



Для проработки:
1) Изучить PEP 8 - Style Guide for Python Code. 
2) Изучить PEP 257
3) Почитать про структуры данных, кайман скинул в чат 5-го вика.
4) Вся инфа по питону: docs.python.org - самый надежный питонный источник информации.
5) Почитать про форматирование строк